// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: app/app.proto

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppClient is the client API for App service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppClient interface {
	List(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppList, error)
	Install(ctx context.Context, in *AppOpRequest, opts ...grpc.CallOption) (*AppOpReply, error)
	Uninstall(ctx context.Context, in *AppOpRequest, opts ...grpc.CallOption) (*AppOpReply, error)
	Start(ctx context.Context, in *AppStatusRequest, opts ...grpc.CallOption) (*AppStatusReply, error)
	Stop(ctx context.Context, in *AppStatusRequest, opts ...grpc.CallOption) (*AppStatusReply, error)
}

type appClient struct {
	cc grpc.ClientConnInterface
}

func NewAppClient(cc grpc.ClientConnInterface) AppClient {
	return &appClient{cc}
}

func (c *appClient) List(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppList, error) {
	out := new(AppList)
	err := c.cc.Invoke(ctx, "/app.App/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Install(ctx context.Context, in *AppOpRequest, opts ...grpc.CallOption) (*AppOpReply, error) {
	out := new(AppOpReply)
	err := c.cc.Invoke(ctx, "/app.App/Install", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Uninstall(ctx context.Context, in *AppOpRequest, opts ...grpc.CallOption) (*AppOpReply, error) {
	out := new(AppOpReply)
	err := c.cc.Invoke(ctx, "/app.App/Uninstall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Start(ctx context.Context, in *AppStatusRequest, opts ...grpc.CallOption) (*AppStatusReply, error) {
	out := new(AppStatusReply)
	err := c.cc.Invoke(ctx, "/app.App/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Stop(ctx context.Context, in *AppStatusRequest, opts ...grpc.CallOption) (*AppStatusReply, error) {
	out := new(AppStatusReply)
	err := c.cc.Invoke(ctx, "/app.App/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServer is the server API for App service.
// All implementations must embed UnimplementedAppServer
// for forward compatibility
type AppServer interface {
	List(context.Context, *AppListRequest) (*AppList, error)
	Install(context.Context, *AppOpRequest) (*AppOpReply, error)
	Uninstall(context.Context, *AppOpRequest) (*AppOpReply, error)
	Start(context.Context, *AppStatusRequest) (*AppStatusReply, error)
	Stop(context.Context, *AppStatusRequest) (*AppStatusReply, error)
	mustEmbedUnimplementedAppServer()
}

// UnimplementedAppServer must be embedded to have forward compatible implementations.
type UnimplementedAppServer struct {
}

func (UnimplementedAppServer) List(context.Context, *AppListRequest) (*AppList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAppServer) Install(context.Context, *AppOpRequest) (*AppOpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedAppServer) Uninstall(context.Context, *AppOpRequest) (*AppOpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uninstall not implemented")
}
func (UnimplementedAppServer) Start(context.Context, *AppStatusRequest) (*AppStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedAppServer) Stop(context.Context, *AppStatusRequest) (*AppStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedAppServer) mustEmbedUnimplementedAppServer() {}

// UnsafeAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServer will
// result in compilation errors.
type UnsafeAppServer interface {
	mustEmbedUnimplementedAppServer()
}

func RegisterAppServer(s grpc.ServiceRegistrar, srv AppServer) {
	s.RegisterService(&App_ServiceDesc, srv)
}

func _App_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.App/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).List(ctx, req.(*AppListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.App/Install",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Install(ctx, req.(*AppOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Uninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Uninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.App/Uninstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Uninstall(ctx, req.(*AppOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.App/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Start(ctx, req.(*AppStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.App/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Stop(ctx, req.(*AppStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// App_ServiceDesc is the grpc.ServiceDesc for App service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var App_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.App",
	HandlerType: (*AppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _App_List_Handler,
		},
		{
			MethodName: "Install",
			Handler:    _App_Install_Handler,
		},
		{
			MethodName: "Uninstall",
			Handler:    _App_Uninstall_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _App_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _App_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/app.proto",
}
