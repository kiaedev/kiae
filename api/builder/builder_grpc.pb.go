// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: builder/builder.proto

package builder

import (
	context "context"
	kiae "github.com/kiaedev/kiae/api/kiae"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuilderServiceClient is the client API for BuilderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuilderServiceClient interface {
	SuggestedStacks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SuggestedStackListResponse, error)
	List(ctx context.Context, in *BuilderListRequest, opts ...grpc.CallOption) (*BuilderListResponse, error)
	Create(ctx context.Context, in *Builder, opts ...grpc.CallOption) (*Builder, error)
	Update(ctx context.Context, in *Builder, opts ...grpc.CallOption) (*Builder, error)
	Delete(ctx context.Context, in *kiae.IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type builderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuilderServiceClient(cc grpc.ClientConnInterface) BuilderServiceClient {
	return &builderServiceClient{cc}
}

func (c *builderServiceClient) SuggestedStacks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SuggestedStackListResponse, error) {
	out := new(SuggestedStackListResponse)
	err := c.cc.Invoke(ctx, "/builder.BuilderService/SuggestedStacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderServiceClient) List(ctx context.Context, in *BuilderListRequest, opts ...grpc.CallOption) (*BuilderListResponse, error) {
	out := new(BuilderListResponse)
	err := c.cc.Invoke(ctx, "/builder.BuilderService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderServiceClient) Create(ctx context.Context, in *Builder, opts ...grpc.CallOption) (*Builder, error) {
	out := new(Builder)
	err := c.cc.Invoke(ctx, "/builder.BuilderService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderServiceClient) Update(ctx context.Context, in *Builder, opts ...grpc.CallOption) (*Builder, error) {
	out := new(Builder)
	err := c.cc.Invoke(ctx, "/builder.BuilderService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderServiceClient) Delete(ctx context.Context, in *kiae.IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/builder.BuilderService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuilderServiceServer is the server API for BuilderService service.
// All implementations should embed UnimplementedBuilderServiceServer
// for forward compatibility
type BuilderServiceServer interface {
	SuggestedStacks(context.Context, *emptypb.Empty) (*SuggestedStackListResponse, error)
	List(context.Context, *BuilderListRequest) (*BuilderListResponse, error)
	Create(context.Context, *Builder) (*Builder, error)
	Update(context.Context, *Builder) (*Builder, error)
	Delete(context.Context, *kiae.IdRequest) (*emptypb.Empty, error)
}

// UnimplementedBuilderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBuilderServiceServer struct {
}

func (UnimplementedBuilderServiceServer) SuggestedStacks(context.Context, *emptypb.Empty) (*SuggestedStackListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestedStacks not implemented")
}
func (UnimplementedBuilderServiceServer) List(context.Context, *BuilderListRequest) (*BuilderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBuilderServiceServer) Create(context.Context, *Builder) (*Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBuilderServiceServer) Update(context.Context, *Builder) (*Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBuilderServiceServer) Delete(context.Context, *kiae.IdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeBuilderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuilderServiceServer will
// result in compilation errors.
type UnsafeBuilderServiceServer interface {
	mustEmbedUnimplementedBuilderServiceServer()
}

func RegisterBuilderServiceServer(s grpc.ServiceRegistrar, srv BuilderServiceServer) {
	s.RegisterService(&BuilderService_ServiceDesc, srv)
}

func _BuilderService_SuggestedStacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServiceServer).SuggestedStacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/builder.BuilderService/SuggestedStacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServiceServer).SuggestedStacks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuilderService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuilderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/builder.BuilderService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServiceServer).List(ctx, req.(*BuilderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuilderService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Builder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/builder.BuilderService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServiceServer).Create(ctx, req.(*Builder))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuilderService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Builder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/builder.BuilderService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServiceServer).Update(ctx, req.(*Builder))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuilderService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kiae.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/builder.BuilderService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServiceServer).Delete(ctx, req.(*kiae.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BuilderService_ServiceDesc is the grpc.ServiceDesc for BuilderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuilderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "builder.BuilderService",
	HandlerType: (*BuilderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuggestedStacks",
			Handler:    _BuilderService_SuggestedStacks_Handler,
		},
		{
			MethodName: "List",
			Handler:    _BuilderService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _BuilderService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BuilderService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BuilderService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "builder/builder.proto",
}
