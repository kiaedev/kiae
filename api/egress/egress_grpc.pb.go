// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: egress/egress.proto

package egress

import (
	context "context"
	kiae "github.com/kiaedev/kiae/api/kiae"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EgressServiceClient is the client API for EgressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EgressServiceClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Create(ctx context.Context, in *Egress, opts ...grpc.CallOption) (*Egress, error)
	Update(ctx context.Context, in *Egress, opts ...grpc.CallOption) (*Egress, error)
	Delete(ctx context.Context, in *kiae.IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type egressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEgressServiceClient(cc grpc.ClientConnInterface) EgressServiceClient {
	return &egressServiceClient{cc}
}

func (c *egressServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/egress.EgressService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egressServiceClient) Create(ctx context.Context, in *Egress, opts ...grpc.CallOption) (*Egress, error) {
	out := new(Egress)
	err := c.cc.Invoke(ctx, "/egress.EgressService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egressServiceClient) Update(ctx context.Context, in *Egress, opts ...grpc.CallOption) (*Egress, error) {
	out := new(Egress)
	err := c.cc.Invoke(ctx, "/egress.EgressService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egressServiceClient) Delete(ctx context.Context, in *kiae.IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/egress.EgressService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EgressServiceServer is the server API for EgressService service.
// All implementations must embed UnimplementedEgressServiceServer
// for forward compatibility
type EgressServiceServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	Create(context.Context, *Egress) (*Egress, error)
	Update(context.Context, *Egress) (*Egress, error)
	Delete(context.Context, *kiae.IdRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEgressServiceServer()
}

// UnimplementedEgressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEgressServiceServer struct {
}

func (UnimplementedEgressServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEgressServiceServer) Create(context.Context, *Egress) (*Egress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEgressServiceServer) Update(context.Context, *Egress) (*Egress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEgressServiceServer) Delete(context.Context, *kiae.IdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEgressServiceServer) mustEmbedUnimplementedEgressServiceServer() {}

// UnsafeEgressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EgressServiceServer will
// result in compilation errors.
type UnsafeEgressServiceServer interface {
	mustEmbedUnimplementedEgressServiceServer()
}

func RegisterEgressServiceServer(s grpc.ServiceRegistrar, srv EgressServiceServer) {
	s.RegisterService(&EgressService_ServiceDesc, srv)
}

func _EgressService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/egress.EgressService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgressService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Egress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/egress.EgressService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressServiceServer).Create(ctx, req.(*Egress))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgressService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Egress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/egress.EgressService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressServiceServer).Update(ctx, req.(*Egress))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgressService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kiae.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/egress.EgressService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressServiceServer).Delete(ctx, req.(*kiae.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EgressService_ServiceDesc is the grpc.ServiceDesc for EgressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EgressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "egress.EgressService",
	HandlerType: (*EgressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _EgressService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _EgressService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EgressService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EgressService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "egress/egress.proto",
}
