syntax = "proto3";

package image;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "kiae/request.proto";
import "validate/validate.proto";

option go_package = "github.com/kiaedev/kiae/api/image";

message Image {
    string id = 1; // @gotags: bson:"_id,omitempty"
    string pid = 2;
    string name = 3 [(validate.rules).string = {}];
    string image = 4;
    string tag = 5;
    string commit_id = 6; // @gotags: bson:"commit_id,omitempty"
    string commit_msg = 7; // @gotags: bson:"commit_msg,omitempty"
    string commit_author = 8; // @gotags: bson:"commit_author,omitempty"

    enum Status {
        UNSPECIFIED = 0;
        PENDING = 1;
        BUILDING = 2;
        PUBLISHED = 3;
        EXPIRED = 4;
        FAILED = 5;
    }
    Status status = 9;

    google.protobuf.Timestamp created_at = 101; // @gotags: bson:"created_at,omitempty"
    google.protobuf.Timestamp updated_at = 103; // @gotags: bson:"updated_at,omitempty"
}

message ImageListRequest {
    string pid = 1;
    Image.Status status = 2;
}

message ImageListResponse {
    repeated Image items = 1;
    int64 total = 2;
}

service ImageService {
    rpc List (ImageListRequest) returns (ImageListResponse) {
        option (google.api.http) = {
            get: "/api/v1/projects/{pid}/images"
        };
    }
    rpc Create (Image) returns (Image) {
        option (google.api.http) = {
            post: "/api/v1/projects/{pid}/images"
            body: "*"
        };
    }
    rpc Update (Image) returns (Image) {
        option (google.api.http) = {
            put: "/api/v1/images/projects/{pid}/{id}",
            body: "*",
            additional_bindings: {
                patch: "/api/v1/projects/{pid}/images/{id}"
                body: "*"
            }
        };
    }
    rpc Delete (kiae.IdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/projects/{id}/images/{id}"
        };
    }
}